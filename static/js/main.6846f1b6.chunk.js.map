{"version":3,"sources":["App.js","index.js"],"names":["boardSize","Square","className","onClick","this","props","value","React","Component","Board","i","key","squares","n","board","row","j","push","renderSquare","Game","state","history","Array","fill","stepNumber","blackIsNext","winner","slice","currentSquares","length","setState","concat","checkWinner","winPatterns","a","b","c","d","e","step","status","current","moves","map","move","desc","jumpTo","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6846f1b6.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\nimport './App.css';\n\nconst boardSize = 19;\n\nclass Square extends React.Component {\n  render() {\n    return (\n        <button className=\"square\" onClick={this.props.onClick}>\n          <div className={`circle ${this.props.value ? this.props.value : ''} `}></div>\n            {/* {this.props.value} */}\n        </button>\n      )\n    }\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square key={i} value={this.props.squares[i]} \n        onClick={() => this.props.onClick(i)} />\n    );\n  }\n\n  render() {\n    let n = 0;\n    let board = [];\n    for (let i = 0; i < boardSize; i += 1) {\n      let row = [];\n      for (let j = 0; j < boardSize; j += 1, n += 1) {\n       row.push(this.renderSquare(n)) \n      }\n      board.push(<div className=\"board-row\" key={i}>{row}</div>);\n    }\n\n    return (\n      <div>\n        <div className=\"board-wrapper\"> {board} </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(boardSize * boardSize).fill(null),\n        }\n      ],\n      stepNumber: 0,\n      blackIsNext: true,\n      winner: false,\n    }\n  }\n\n  handleClick(i) {\n    const {blackIsNext, winner, stepNumber} = this.state;\n    const history = this.state.history.slice(0, stepNumber + 1);\n    const current = history[history.length - 1];\n    const currentSquares = current.squares.slice();\n    if (winner || currentSquares[i]) return; //同一個位置不能重覆下\n\n    currentSquares[i] = blackIsNext ? 'black' : 'white'; //下棋子\n\n    this.setState({\n      history: history.concat([\n        {\n          squares: currentSquares,\n        }\n      ]),\n      stepNumber: history.length,\n      blackIsNext: !blackIsNext,\n      winner: this.checkWinner(currentSquares)\n    });\n  }\n\n  checkWinner(currentSquares) {\n    const winPatterns = []; // 獲勝的組合\n    for (let i = 0; i < boardSize * boardSize; i += 1) {\n      winPatterns.push([i, i+1, i+2, i+3, i+4]); //橫向\n      winPatterns.push([i, i+19, i+38, i+57, i+76]); //直向\n      winPatterns.push([i, i+20, i+40, i+60, i+80]); //斜向\n      winPatterns.push([i, i+18, i+36, i+54, i+72]); //反斜向\n    }\n\n    for (let i = 0; i < winPatterns.length; i += 1) { //驗証\n      const [a, b, c, d, e] = winPatterns[i];\n      if (currentSquares[a] && \n          currentSquares[a] === currentSquares[b] &&\n          currentSquares[a] === currentSquares[c] &&\n          currentSquares[a] === currentSquares[d] &&\n          currentSquares[a] === currentSquares[e]) {\n        return currentSquares[a];\n      } \n    } return null;\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      blackIsNext: (step % 2) === 0,\n      winner: false\n    });\n  }\n\n  render() {\n    const {history, blackIsNext, stepNumber} = this.state;\n    const current = history[stepNumber]; //歷史步驟\n    const winner = this.checkWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>\n            {desc}\n          </button>\n        </li>\n      )\n    })\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: '　+ (blackIsNext ? 'Black' : 'White');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={(i) => this.handleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div className=\"game-info__title\">GOMOKU</div>\n          <div className={`player ${winner ? 'success' : ''}`}>\n            {status}\n          </div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}